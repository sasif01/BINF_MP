#PACKAGES 
import re
import os
import sys
from os import path
from sys import argv
import textwrap

###INSTRUCTION FOR RUNNING SCRIPT####

#Purpose: Score each base in of the consensus sequences based on if the same base is present in the referance Sars-CoV-2 sequence or in 
#the aligned sequences files. Fragment the consensus (length of fragment is specified by user) and filter out segments that have an 
#average score lower than the one specified by the user. The resulting fragment are considered highly stable.

#Running the script:The script takes one command line argument (the consensus sequences file) 
#python3 conservation_score.script consensus.file


#This prompts the user to specify the length of fragment the consensus into (must be >100bp) and the Level of conservation across each 
#fragment lengths. Fragments with less then the specified level of conservation are filtered out.

#Result: A new FASTA file with the fragmented, conserved sequences, with the headers containing the location and stability score 
#information.

##FIRST COMMAND LINE ARGUMENT: the file of consesuss sequences for each timframe (in one file)
con=open(sys.argv[1], 'r')
con_lines=con.readlines()

##USER INPUTS
frag=input('Length of fragment (>100 bp)?: ')
threshold=input('Level of conservation (ie. 95, 99 etc)?: ')

#Change this file path to the folder that contains all the aligned sequnces files
#conservation scores for each consesusus sequnces for each timeframe/varient file 
for file in os.listdir(r'/Users/sairaasif49/Desktop/BINF_MP/Data/aligned_seqs/4mn_2olp/'):
	#zuc holds the aligned sequences from each timeframe/variant 
	zuc=[]
	files=open(file, 'r')
	files_lines=files.readlines()
	for index, line in enumerate(files_lines):
		if (line.startswith('>')):
			#Appending the sequences (ie. lines after '>')
			zuc.append(files_lines[index+1].upper())
	print(zuc)
	#The fragmented sequences for each aligned file/consesnsus is written to a new file
#	stretch=open(file+'_stretches', 'w')
#	dict={}
#	#counts how many time the aligned sequnces have the same character as the consesus seq	
#	for index, line in enumerate(con_lines):
#		if (line.startswith(file)):
#			header=con_lines[index]
#			print(header)
#			con_seq=con_lines[index+1]
#			d=[i[1].count(i[0]) for i in zip(con_seq, zip(*zuc))]
#			b=[len(i[1]) for i in zip(con_seq, zip(*zuc))]
#			#Scores each nucleotide site for each consensus sequence
#			s=[d[i]/b[i] for i in range(0,len(d))]
#			splits=textwrap.wrap(con_seq, width=frag)
#			n=frag
#			score_split=[s[i*n:(i+1)*n] for i in range((len(s)+ n-1)//n )
#		#	reg=range(0, len(con_seq), 100)
#			for m in range(len(score_split)):				
#				avg=sum(score_split[m])/len(score_split[m])
#				if (avg > threshold):
#					dict[reg[m]]=[splits[m], avg]
				
#	for i in dict.keys():
#		stretch.write(str(i)+'_'+str(i+len(dict[i][0]))+'_'+str(dict[i][1])+'\n'+dict[i][0])

