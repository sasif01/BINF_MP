import re
import os
import sys
from os import path
from sys import argv
import textwrap
import collections
from itertools import zip_longest
from collections import Counter


###EXTRACT CONSERVED REGIONS FROM REFERANCE GENOME###

####COMMAND LINE ARGUMENTS#####

##FIRST COMMAND LINE ARGUMENT: the file of consensus sequences for each timeframe-variant combo (in one file)
con=open(sys.argv[1], 'r')
con_lines=con.readlines()

##SECOND COMMAND LINE ARGUMENT: The referance genome for the SARS-CoV-2
ref=open(sys.argv[2], 'r')
ref_lines=ref.readlines()


####USER INPUTS####
frag=input('Length of fragment (>100 bp)?: ')
threshold=input('Level of conservation (ie. 95, 99 etc): ')
                        
#S
#Empty list - will be used to hold the referancea and consensus sequences
seq=[]

#Adding the referance sequences to empty list
for index, line in enumerate(ref_lines):
	if (line.startswith('>')):
		seq.append(ref_lines[index+1])

#Adding the consensus sequences to the list 
for index, line in enumerate(con_lines):
	if (line.startswith('>')):
		seqs=con_lines[index+1]
		seq.append(seqs.rstrip())

#Fragment the referance genome
ref_seq=[]
ref_split=list()
for index, line in enumerate(ref_lines):
	if (line.startswith('>')):
		ref_seq.append(ref_lines[index+1])
		ref_split.append(textwrap.wrap(ref_lines[index+1], 100))

#Stability score - from the consensus sequences to the referance sequences
#Counts the number of bases in common (at each index) between all the consensus sequences and the referance
score_splits=[i[1::].count(i[0])/len(seq) for i in  zip_longest(*seq) if len(i)==len(seq)]

#list for the location information along the referance genome
reg=[i+1 for i in range(0, len(seq[0]), int(frag))]

#Fragments list of scores 
n=int(frag)
final = [score_splits[i * n:(i + 1) * n] for i in range((len(score_splits) + n - 1) // n )] 

cons=open('conserved_regions'+'_'+threshold+_frag, 'w')
noncon=open('non_conserved_regions'+'_'+threshold+_frag, 'w')

#Average the score for each fragment
#Filter out fragments with less then the specified score
#Append the location info, fragments and the score to empty dictionary
dict={}
dict2={}
for i in range(len(final)):
	avg=sum(final[i])/len(final[i])
	if (avg > int(threshold)/100):
		if (reg[i] not in dict.keys()):
			dict[reg[i]]=[]
		dict[reg[i]].append(ref_split[0][i])
		dict[reg[i]].append(avg)
	else:
		if (reg[i] not in dict2.keys()):
			dict2[reg[i]]=[]
		dict2[reg[i]].append(ref_split[0][i])
		dict2[reg[i]].append(avg)
for i in dict.keys():
	cons.write('>'+str(i)+'-'+str(i+int(frag)-1)+' '+'scrore='+str(dict[i][1])+'\n'+str(dict[i][0])+'\n')

for i in dict2.keys():
        noncons.write('>'+str(i)+'-'+str(i+int(frag)-1)+' '+'scrore='+str(dict2[i][1])+'\n'+str(dict2[i][0])+'\n')
      



