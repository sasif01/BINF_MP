import csv
import os 
import re 
import sys 
from sys import argv 
from decimal import Decimal


#Conserved sequnces 
cons=open(sys.argv[1], 'r').readlines()
name_list=sys.argv[1].split('/')[-1].split('_')
frag=name_list[-1]
scores=name_list[-2]

###GC/AC/AG Conent###

X=input('Specify AC,GC,AG?: ')

dict={}

for index, line in  enumerate(cons):
	if (line.startswith('>')):
		header=cons[index]
		pos=header.split(' ')[0]
		avg_score=header.split(' ')[1]
		seq=cons[index+1]
		A=seq.count(X[0])
		B=seq.count(X[1])
		AB=(A+B)/len(seq)
		dict[pos]=[AB, avg_score.rstrip()]


header=['position',X+'_score', 'conservation_average']

pos=[]
bp=[]
avg=[]
for i in dict.keys():
	pos.append(i.split('>')[1])
	avg.append(dict[i][1].split('=')[1])
	bp.append(dict[i][0])

data=zip(pos, bp, avg)

#for i in dict.keys():
#	score=dict[i][1].split('=')[1]		
#	if (round(float(score),3) >= int(threshold)/100):
#		AB.append(str(dict[i][0]))
#		level.append('Higher')
#		print(str(dict[i][0])+' High')
#	if (float(score) < int(threshold)/100):
#		AB.append(str(dict[i][0]))
#		level.append('Lower')
#		print(str(dict[i][0])+' Low')

with open(str(X)+'_score_'+scores+'_'+frag, 'w', newline='') as f_output:		
	tsv_output = csv.writer(f_output, delimiter='\t')
	tsv_output.writerow(header)
	for p, b, a in data:
		tsv_output.writerow([p, b, a])


###Spread of GC, AC, AG content###
#Generate a figure to show where spread of GC content across cnserved regions
#Use location info from the conserverd regions FASTAs to generate figure

#for i in dict.keys():
#	if (dict[i]<=0.25):
#		print('Low')
#	if (dict[i]>=0.75):
#		print('High')
#	if (dict[i]<0.75 and dict[i]>0.25):
#		print('Intermediate')

###Location in Genome###	
#Figure to show spread of stable regions 
#Location info is in header of conserved regions 
#Generate count of how many conserved regions have the same location - use in barplot 

#for i in os.lisdir('filepath_to_all_conserverd_regions_file')
#	dict={}
#	count=0
#	file=open('i', 'r').readlines()
#	for index, line in enumerate(file):
#		if (line.startswith('>')):
#			header=file[index]
#			pos=header.split(' ')[1]
			

####Gene####
#meta=open('sequence.meta', 'r').readlines()

#for i in meta:
#	lines=[i.rstrip().split('\t') if i!='#']
#	start=[lines[4] if (lines[3]=='gene')]
#	end=[lines[5] if (lines[3]=='gene')]
#	
		
			
