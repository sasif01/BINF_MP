#PACKAGES used in the script
import re 
import sys
from sys import argv
from itertools import count
from collections import defaultdict

###INSTRUCTIONS FOR RUNNING SCRIPT####

#Purpose: Reorganizes the sequences in the fasta file. For WHO Lineages (WHO lineages: Alpha, Delta, Omicron etc.) with multiple variants 
#(ie. Omicron), the sequences are separated by variant. WHO lineages with a single variant (Alpha, Beta etc.) are separated into fixed 
#time intervals (in months), with a given overlap between intervals, specified by the user.

#Running the script:The script takes user input and 2 command line arguments. The first is the Metadata file associated with the FASTA 
#file. Second is the FASTA file (first = Meta file, second = Fasta file, both are located in 
#the Data/raw_seq/ folder).

#From terminal, the script is run as fallows: 

#python3 variant_timeframes.script Meta.file Fasta.file

#Running this prompts the user to specify the delimiter in the metafile, the time-interval window (in months) to separate sequences by, 
#and the overlap between windows (in months).

#Results: The output is multiple FASTA files named after the Lineage and variant or the Lineage and time-interval. The FASTA files 
#produced for this project are in the Data/processed_seqs/ folder.


# Dictionary to hold the WHO lineage and pangolin designations for SARS-CoV-2
lins=defaultdict(set)

####COMMAND LINE ARGUMENTS####

# FIRST COMMAND LINE ARGUMENT: The metafile for the Fasta 
meta=open(sys.argv[1], 'r')
# Assumes the first line is a header
meta_lines=meta.readlines()[1:]

# SECOND COMMAND LINE ARGUMENT: The Fasta file
seqs=open(sys.argv[2], 'r')
seq_lines=seqs.readlines()

####USER INPUT###
# User specifies the delimeter in the metafile
delim=input('Specify the delimiter from metadat file: ')
window=input('What is the time interval (in months)?: ')
overlap=input('How much overlap between fixed time windows (in months)?: ')

# Adds the Lineage and variant info to a dictionary to access later
for i in meta_lines:
	datalines=i.rstrip().split(delim)
	# The WHO lineage info is in the 7th column of metafile - change this for different metafile
	lin=datalines[6]
	# The pangolin varient info is in the 2nd column - change this for different metafile
	var=datalines[1]
	lins[lin].add(var)

# Ensuring only a single copy of each pangolin in kept in the dict
d={key:value for key, value in zip(lins.keys(), [list(set(lins[i])) for i in lins.keys()])}

dict={}

for lin in d.keys():
	for i in meta_lines:
		lines=i.rstrip()
		datalines=i.rstrip().split(delim)
		# If Lineage only has a single variant sequences are seperated by time-intervals 
		if len(d[lin])==1:
			if (d[lin][0] in lines):
				# This should be adjusted is sequence data is found earlier 
				# SARS-CoV-2 didnt have many sequences before 2018.
				for j in range(18,23):
					for k in range(0,12,int(overlap)):
						for l in range(1,int(window)+1):
							# When intervals are within the same year
							if (k+int(window) <=12): 
								for m in re.findall('20'+str(j)+r'-'+"{:02d}".format(k+l), datalines[4]):
									if (lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j)+'-'+str(k+int(window)) not in dict.keys()):
										dict[lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j)+'-'+str(k+int(window))]=[]
									dict[lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j)+'-'+str(k+int(window))].append(datalines[0])
							# When interval passes into the next year
							else:
								for m in re.findall('20'+str(j+1)+'-'+"{:02d}".format(k+l-12),datalines[4]):
									if (lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j+1)+'-'+str(k+int(window)-12) not in dict.keys()):
										dict[lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j+1)+'-'+str(k+int(window)-12)]=[]
									dict[lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j+1)+'-'+str(k+int(window)-12)].append(datalines[0])
								for n in re.findall('20'+str(j)+'-'+"{:02d}".format(k+l),datalines[4]):
									if (lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j+1)+'-'+str(k+int(window)-12) not in dict.keys()):
										dict[lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j+1)+'-'+str(k+int(window)-12)]=[]
									dict[lin+'_'+'20'+str(j)+'-'+str(k+1)+'_20'+str(j+1)+'-'+str(k+int(window)-12)].append(datalines[0])	
		# For lineages with multiple variants (Omicron etc.)
		else:
			for var in d[lin]:
				if (datalines[1].count('.')==1):
					if (str(lin)+'_'+str(datalines[1]) not in dict.keys()):
						dict[str(lin)+'_'+str(datalines[1])]=[]
					dict[str(lin)+'_'+str(datalines[1])].append(datalines[0])
				else:
					if (str(lin)+'_'+str(datalines[1]) not in dict.keys()):
						dict[str(lin)+'_'+str(datalines[1])]=[]
					dict[str(lin)+'_'+str(datalines[1])].append(datalines[0])

# Removes duplicate Accessions from list of values.
res=[list(set(dict[i])) for i in dict.keys()]
dict2={key:value for key, value in zip(dict.keys(), [list(set(dict[i])) for i in dict.keys()])}	

#Using the Accessions to reorganize the sequences by variant.
for i in dict2.keys():
	with open(i,'w') as fasts:
		for index, line in enumerate(seq_lines):
			for j in dict2[i]:
				if (line.startswith('>')):
					if (j in line):
						header=seq_lines[index]
						fasts.write(header.rstrip()+'\n'+seq_lines[index+1])





